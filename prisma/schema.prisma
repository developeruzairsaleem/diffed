generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  deposit
  withdrawal
  payment
  refund
}

enum TransactionStatus {
  pending
  completed
  failed
  cancelled
}

enum Role {
  admin
  customer
  provider
}

enum Status {
  active
  inactive
  suspended
}

enum PaymentStatus {
  unpaid
  paid
  refunded
}

enum OrderActorRole {
  customer
  provider
}

model PlatformReview {
  id          String @id @default(cuid())
  starRating  Int
  description String @db.Text
  userimage   String
  name        String

  @@map("reviews")
}

model Transaction {
  id                    String            @id @default(cuid())
  walletId              String            @map("wallet_id")
  type                  TransactionType
  amount                Decimal           @db.Decimal(10, 2)
  description           String?
  stripePaymentIntentId String?           @map("stripe_payment_intent_id")
  paypalOrderId         String?           @map("paypal_order_id")
  paypalCaptureId       String?           @map("paypal_capture_id")
  paymentMethod         PaymentMethod     @default(stripe)
  status                TransactionStatus @default(pending)
  metadata              Json?
  createdAt             DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId], name: "idx_transactions_wallet_id")
  @@index([type], name: "idx_transactions_type")
  @@index([status], name: "idx_transactions_status")
  @@index([paymentMethod], name: "idx_transactions_payment_method")
}

model Game {
  id         String    @id @default(cuid())
  name       String    @unique
  image      String
  isEloBased Boolean   @default(false)
  ranks      Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  services   Service[]

  @@map("games")
}

// new changes to schema
model User {
  id           String   @id @default(cuid())
  username     String   @unique
  email        String   @unique
  bio          String? 
  password     String
  bio          String?
  role         Role
  status       Status   @default(active)
  stripeCustId String?  @map("stripe_customer_id")
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  wallet      Wallet?
  orders      Order[]           @relation("CustomerOrders")
  assignments OrderAssignment[]
  chats       Chat[]
}

model Wallet {
  id       String  @id @default(cuid())
  balance  Decimal @default(0.00) @db.Decimal(10, 2)
  currency String  @default("USD")

  userId       String        @unique @map("user_id")
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([userId], name: "idx_wallets_user_id")
}

model Service {
  id          String       @id @default(cuid())
  name        String
  description String
  gameId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  game        Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  subpackages Subpackage[]
}

model Subpackage {
  id                String   @id @default(cuid())
  name              String
  description       String
  price             Float
  duration          String? // e.g. "3h"
  dynamicPricing    Boolean  @default(false)
  basePricePerELO   Float?
  minELO            Int?
  maxELO            Int?
  serviceId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  service           Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  stripeProdId      String?  @unique
  stripePriceId     String?  @unique
  requiredProviders Int      @default(1)
  orders            Order[]
}

model Order {
  id              String            @id @default(cuid())
  orderNumber     String            @unique @default(cuid())
  customerId      String
  customer        User              @relation("CustomerOrders", fields: [customerId], references: [id], onDelete: Cascade)
  subpackageId    String
  discordTag      String
  discordUsername String
  subpackage      Subpackage        @relation(fields: [subpackageId], references: [id], onDelete: Cascade)
  price           Float
  status          OrderStatus       @default(PENDING)
  notes           String?
  rerollsLeft     Int               @default(3)
  approvedCount   Int               @default(0) // redundant no need to change
  requiredCount   Int               @default(1) // how many providers needed
  stripeSessId    String?
  paypalOrderId   String?           @map("paypal_order_id")
  paymentMethod   PaymentMethod     @default(stripe)
  currentELO      Int?
  targetELO       Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  isInQueue       Boolean           @default(true)
  assignments     OrderAssignment[]
  chats           Chat[]
}

model OrderAssignment {
  id            String                @id @default(cuid())
  orderId       String
  providerId    String
  claimedAt     DateTime              @default(now())
  status        OrderAssignmentStatus @default(PENDING)
  approved      Boolean               @default(false)
  completed     Boolean               @default(false)
  leftEarly     Boolean               @default(false)
  progress      Float                 @default(0.0) // percentage 0-100
  proofUrl      String?
  reviewRating  Int?
  reviewText    String?
  gamePlay      Int?
  communication Int?
  attitude      Int?
  tipAmount     Int?

  order    Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  provider User  @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([orderId, providerId])
}

model Chat {
  id       String   @id @default(cuid())
  orderId  String
  senderId String
  message  String
  sentAt   DateTime @default(now())

  order  Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  sender User  @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum OrderAssignmentStatus {
  REPLACED
  PENDING
  APPROVED
  COMPLETED
  VERIFIED
}

enum PaymentMethod {
  stripe
  paypal
}

