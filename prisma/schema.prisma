// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VerificationStatus {
  unverified
  pending
  verified
}

enum Availability {
  online
  offline
  busy
}

enum CustomerType {
  casual
  competitive
  professional
  collector
}

enum GamingLevel {
  beginner
  intermediate
  advanced
  expert
}

enum BudgetRange {
  low
  medium
  high
  premium
}

enum ActivityPattern {
  weekend_warrior
  daily_grinder
  casual_player
  seasonal_player
}

enum LearningStyle {
  visual
  hands_on
  analytical
  social
}

enum TransactionType {
  deposit
  withdrawal
  payment
  refund
}

enum TransactionStatus {
  pending
  completed
  failed
  cancelled
}

enum CommunicationPreference {
  text_only
  voice_chat
  video_call
  mixed
}

enum RiskTolerance {
  low
  medium
  high
}

enum ProviderType {
  coach
  booster
}

enum Role {
  customer
  provider
}

enum Status {
  active
  suspended
  ban
}

enum PaymentStatus {
  unpaid
  paid
  refunded
}

enum OrderActorRole {
  customer
  provider
}

model Review {
  id          String @id @default(cuid())
  starRating  Int
  description String @db.Text
  image       String
  name        String

  @@map("reviews")
}

// ---------------------------------
// LATEST CHANGES IN THE APPLICATION
// ---------------------------------
model User {
  id               String      @id @default(cuid())
  username         String      @unique
  email            String      @unique
  password         String
  role             Role
  status           Status      @default(active)
  stripeCustomerId String?     @map("stripe_customer_id")
  profileImage     String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  wallet           Wallet?
  providerId       String?
  customerId       String?
  orderUsers       OrderUser[]

  @@map("users")
}

model Wallet {
  id        String   @id @default(cuid())
  balance   Decimal  @default(0.00) @db.Decimal(10, 2)
  currency  String   @default("USD") @db.VarChar(3)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  userId       String        @unique @map("user_id")
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([userId], name: "idx_wallets_user_id")
}

model Transaction {
  id                    String            @id @default(cuid())
  walletId              String            @map("wallet_id")
  type                  TransactionType
  amount                Decimal           @db.Decimal(10, 2)
  description           String?
  stripePaymentIntentId String?           @map("stripe_payment_intent_id")
  status                TransactionStatus @default(pending)
  metadata              Json?
  createdAt             DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime          @default(now()) @map("updated_at") @db.Timestamptz(6)

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId], name: "idx_transactions_wallet_id")
  @@index([type], name: "idx_transactions_type")
  @@index([status], name: "idx_transactions_status")
}

model Game {
  id         String    @id @default(cuid())
  name       String    @unique
  image      String
  isEloBased Boolean   @default(false)
  ranks      Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  services   Service[]

  @@map("games")
}

model Service {
  id          String       @id @default(cuid())
  name        String
  description String
  gameId      String
  game        Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  subpackages Subpackage[]

  @@map("services")
}

model Subpackage {
  id              String   @id @default(cuid())
  name            String
  description     String
  price           Float
  duration        String?
  dynamicPricing  Boolean  @default(false)
  basePricePerELO Float?
  minELO          Int?
  maxELO          Int?
  stripeProductId String?  @unique
  stripePriceId   String?  @unique
  serviceId       String
  service         Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Order           Order[]

  @@map("subpackages")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique @default(cuid())
  subPackageId    String
  subpackage      Subpackage  @relation(fields: [subPackageId], references: [id])
  price           Float
  scheduledTime   DateTime?
  completionTime  DateTime?
  status          OrderStatus @default(PENDING)
  notes           String?
  stripeSessionId String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderUsers      OrderUser[]

  @@map("orders")
}

model OrderUser {
  id      String  @id @default(cuid())
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?
  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?

  @@unique([userId, orderId])
}

enum OrderStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
