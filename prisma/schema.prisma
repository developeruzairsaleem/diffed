// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  customer
  provider
}

enum Status {
  active
  suspended
  ban
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  username     String   @unique
  password     String
  role         Role
  status       Status   @default(active)
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  provider Provider? //add customer too when made
  customer Customer?

  @@map("users")
}

enum VerificationStatus {
  unverified
  pending
  verified
}

enum Availability {
  online
  offline
  busy
}

enum ProviderType {
  coach
  booster
}

model Provider {
  id                 String             @id @default(cuid())
  userId             String             @unique
  user               User               @relation(fields: [userId], references: [id])
  firstName          String?
  lastName           String?
  providerType       ProviderType
  services           ProviderService[]
  games              Json
  currentRanks       Json
  peakRanks          Json?
  experienceYears    Int
  totalOrders        Int                @default(0)
  completedOrders    Int                @default(0)
  averageRating      Decimal            @default(0) @db.Decimal
  totalEarnings      Decimal            @default(0) @db.Decimal
  availabilityStatus Availability       @default(offline)
  verificationStatus VerificationStatus @default(unverified)
  verificationBadges Json?
  bio                String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  //Relations
  orders Order[]

  @@map("providers")
}

model Service {
  id          String            @id @default(cuid())
  title       String
  description String
  image       String            @default("https://diffed.gg/images/Maskgroup.png")
  providers   ProviderService[]

  @@map("services")
}

model ProviderService {
  id         String   @id @default(cuid())
  provider   Provider @relation(fields: [providerId], references: [id])
  providerId String
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  String
  price      Float
  duration   String? // e.g. "1 hour", optional
  experience Int?
  notes      String?

  // Add any provider-specific service configs (like experience, package etc)

  //relations
  orders Order[]
}

enum CustomerType {
  casual
  competitive
  professional
  collector
}

enum GamingLevel {
  beginner
  intermediate
  advanced
  expert
}

enum BudgetRange {
  low
  medium
  high
  premium
}

enum ActivityPattern {
  weekend_warrior
  daily_grinder
  casual_player
  seasonal_player
}

enum LearningStyle {
  visual
  hands_on
  analytical
  social
}

enum CommunicationPreference {
  text_only
  voice_chat
  video_call
  mixed
}

enum RiskTolerance {
  low
  medium
  high
}

model Customer {
  id                      String                  @id @default(cuid())
  userId                  String                  @unique
  user                    User                    @relation(fields: [userId], references: [id])
  firstName               String?
  lastName                String?
  customerType            CustomerType
  gamingLevel             GamingLevel
  primaryGames            Json
  currentRanks            Json?
  gamingGoals             Json?
  budgetRange             BudgetRange             @default(medium)
  preferredServiceTypes   Json?
  activityPattern         ActivityPattern         @default(casual_player)
  learningStyle           LearningStyle           @default(hands_on)
  communicationPreference CommunicationPreference @default(mixed)
  peakHours               Json?
  riskTolerance           RiskTolerance           @default(medium)
  totalOrders             Int                     @default(0)
  totalSpent              Decimal                 @default(0) @db.Decimal(12, 2)
  lifetimeValue           Decimal                 @default(0) @db.Decimal(12, 2)
  satisfactionScore       Decimal                 @default(0) @db.Decimal(3, 2)
  churnRiskScore          Decimal                 @default(0) @db.Decimal(3, 2)
  lastOrderDate           DateTime?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt

  // Relations (commented for now, to be added when those models are made)
  orders Order[]
  // customerPreferences     CustomerPreference?
  // customerJourney         CustomerJourney?
  // gamingHistory           CustomerGamingHistory[]
  // feedback                CustomerFeedback[]

  @@map("customers")
}

model Game {
  id        String @id @default(cuid())
  image     String
  teammates Int
  sessions  Int
  name      String

  orders Order[]

  @@map("games")
}

model Order {
  id                 String        @id @default(cuid())
  customerId         String
  providerId         String
  providerServiceId  String
  gameId             String
  scheduledDate      DateTime
  status             OrderStatus   @default(pending)
  paymentStatus      PaymentStatus @default(unpaid)
  notes              String?
  cancellationReason String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  // Relations
  customer        Customer             @relation(fields: [customerId], references: [id])
  provider        Provider             @relation(fields: [providerId], references: [id])
  providerService ProviderService      @relation(fields: [providerServiceId], references: [id])
  game            Game                 @relation(fields: [gameId], references: [id])
  statusHistory   OrderStatusHistory[]
}

enum OrderStatus {
  pending
  confirmed
  in_progress
  completed
  cancelled
}

enum PaymentStatus {
  unpaid
  paid
  refunded
}

enum OrderActorRole {
  customer
  provider
}

model OrderStatusHistory {
  id             String         @id @default(cuid())
  orderId        String
  previousStatus OrderStatus
  newStatus      OrderStatus
  changedByRole  OrderActorRole
  reason         String?
  changedAt      DateTime       @default(now())

  order Order @relation(fields: [orderId], references: [id])
}

model Review {
  id          String @id @default(cuid())
  starRating  Int
  description String @db.Text
  image       String
  name        String

  @@map("reviews")
}
